const { ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder } = require('discord.js');
const ticketOwners = require('../ticketOwners');

module.exports = {
    handleCommand: async (interaction) => {

            const REQUIRED_ROLE_ID = '1076685983724085371';

            if (!interaction.member.roles.cache.has(REQUIRED_ROLE_ID)) {
            return interaction.reply({
                content: '‚õî Vous n\'avez pas le r√¥le requis pour utiliser cette commande.',
                ephemeral: true,
            });
            }
        // Cr√©er des boutons pour confirmer ou annuler
        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('confirm_ref')
                    .setLabel('Confirmer le refus')
                    .setStyle(ButtonStyle.Danger),
                new ButtonBuilder()
                    .setCustomId('cancel_ref')
                    .setLabel('Annuler')
                    .setStyle(ButtonStyle.Secondary)
            );

        // Demander confirmation
        await interaction.reply({
            content: '‚ö†Ô∏è Vous √™tes sur le point d\'envoyer un message de refus au candidat. Confirmez-vous ?',
            components: [row],
            ephemeral: true
        });
    },

handleButton: async (interaction) => {
    if (interaction.customId === 'confirm_ref') {
        await interaction.update({
            content: '‚úÖ Message de refus en cours d\'envoi...',
            components: [],
            ephemeral: true
        });

        // R√©cup√©rer l'ID du propri√©taire du ticket
        const ownerId = ticketOwners.get(interaction.channel.id);
        if (!ownerId) {
            console.error(`‚ùå Aucun propri√©taire associ√© au channel ${interaction.channel.id}`);
            return interaction.followUp({ content: '‚ùå Impossible de trouver le propri√©taire du ticket.', ephemeral: true });
        }
        
        // Tenter de fetch le membre
        let user;
        try {
            user = await interaction.guild.members.fetch(ownerId);
            console.log(`‚úÖ Utilisateur r√©cup√©r√©: ${user.user.tag}`);
        } catch (error) {
            console.error('‚ùå Impossible de fetch l\'utilisateur:', error);
            return interaction.followUp({ content: '‚ùå Impossible de r√©cup√©rer l\'utilisateur.', ephemeral: true });
        }

        // Renommer le channel
        try {
            const channel = interaction.channel;
            const newChannelName = `Candidature refus√©e ‚ùå`
            .toLowerCase()
            .replace(/[^a-z0-9-\s]/g, '') // autorise espace \s
            .replace(/\s+/g, '-') // remplace les espaces par des tirets
            .substring(0, 32);            
            await channel.setName(newChannelName);
            console.log(`Channel name updated to: ${newChannelName}`);
        } catch (error) {
            console.error(`Failed to update channel name: ${error}`);
            return interaction.followUp({ content: '‚ö†Ô∏è Erreur lors de la modification du nom du channel.', ephemeral: true });
        }

        // Construire et envoyer le message embed
        const refusalEmbed = new EmbedBuilder()
            .setColor(0xff0000)
            .setTitle('Candidature refus√©e ‚ùå')
            .setDescription(`Merci beaucoup pour l'int√©r√™t que vous avez port√© au Burger Shot üçî

Apr√®s une r√©flexion approfondie, nous avons d√©cid√© de ne pas donner suite √† votre candidature.
Nous vous souhaitons beaucoup de succ√®s dans vos projets futurs. üôè

Apr√®s avoir lu ce message, nous vous invitons √† fermer votre ticket !

Cordialement,
L'√©quipe de recrutement du Burger Shot`);

        await interaction.channel.send({ embeds: [refusalEmbed] });

        // Mentionner le candidat √† part
        await interaction.channel.send({ content: `<@${user.id}>` });

        console.log('Message de refus envoy√©.');
    } else if (interaction.customId === 'cancel_ref') {
        await interaction.update({
            content: '‚ùå Refus annul√©',
            components: [],
            ephemeral: true
        });
    }
}



};